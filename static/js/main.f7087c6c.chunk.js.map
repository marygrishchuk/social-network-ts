{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Messages/Message.module.css","components/Header/Header.module.css","components/Header/logo.png","components/Profile/MyPosts/Post/like.svg","components/Profile/MyPosts/Post/notLiked.png","serviceWorker.ts","components/Header/Header.tsx","components/Navbar/Navbar.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Messages/Message.tsx","redux/dialogs-reducer.ts","components/Dialogs/Dialogs.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Friends/Friends.tsx","App.tsx","redux/navbar-reducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","logo","Navbar","props","friends","state","map","f","avatar","name","nav","linkContainer","to","activeClassName","active","settings","profileReducer","action","type","newPost","id","v1","avatarUrl","message","newPostText","liked","likesCount","posts","splice","newText","postToLikeOrUnlike","find","p","postId","Post","item","ava","onClick","dispatch","like","likeImg","notLikedImg","MyPosts","postElements","newPostElement","React","createRef","addPost","postsBlock","ref","textArea","value","onChange","text","current","updateNewPostTextActionCreator","onKeyPress","e","ctrlKey","charCode","placeholder","addButton","ProfileInfo","profileInfo","coverContainer","profileCover","avatarContainer","description","Profile","profilePage","DialogItem","dialog","friendName","Message","rightSide","leftSide","dialogsReducer","newMessage","newMessageText","messages","push","body","Dialogs","store","getState","dialogsElements","dialogsPage","dialogs","d","messagesElements","m","newMessageBody","textarea","onSendMessageClick","focus","dialogItems","chat","currentTarget","autoFocus","btn","News","Music","Settings","Friends","App","navBar","path","render","bind","navbarReducer","_state","_callSubscriber","console","log","this","subscribe","observer","rerenderEntireTree","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f7087c6c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3iETX\",\"linkContainer\":\"Navbar_linkContainer__11hUb\",\"active\":\"Navbar_active__KUwQj\",\"settings\":\"Navbar_settings__2HH2P\",\"friends\":\"Navbar_friends__3EtCy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Htpb\",\"dialogItems\":\"Dialogs_dialogItems__6IwSL\",\"messages\":\"Dialogs_messages__3zRWP\",\"chat\":\"Dialogs_chat__2qccB\",\"newMessage\":\"Dialogs_newMessage__3UBek\",\"textarea\":\"Dialogs_textarea__aqXpQ\",\"btn\":\"Dialogs_btn__9u19v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__30Prz\",\"coverContainer\":\"ProfileInfo_coverContainer__3lWly\",\"profileCover\":\"ProfileInfo_profileCover__2PW5F\",\"avatarContainer\":\"ProfileInfo_avatarContainer__6L0J2\",\"avatar\":\"ProfileInfo_avatar__hmvNl\",\"description\":\"ProfileInfo_description__QvS3n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2LmhB\",\"newPost\":\"MyPosts_newPost__2zgiH\",\"textArea\":\"MyPosts_textArea__UD6G7\",\"addButton\":\"MyPosts_addButton__QiBag\",\"posts\":\"MyPosts_posts__vm13l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2PUsA\",\"ava\":\"Post_ava__1lYQE\",\"name\":\"Post_name___NjC7\",\"message\":\"Post_message__1N-uC\",\"like\":\"Post_like__3GzLZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3li-h\",\"avatar\":\"DialogItem_avatar__30P8p\",\"active\":\"DialogItem_active__V0xw7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftSide\":\"Message_leftSide__2Rb2a\",\"rightSide\":\"Message_rightSide__1gStf\",\"message\":\"Message_message__cleDf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__12wRa\"};","module.exports = __webpack_public_path__ + \"static/media/logo.cb021b28.png\";","module.exports = __webpack_public_path__ + \"static/media/like.0483f2b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/notLiked.742e1553.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from './Header.module.css';\r\nimport logo from './logo.png';\r\n\r\nexport const Header = () => {\r\n    return <header className={s.header}>\r\n        <img src={`${logo}`} />\r\n    </header>\r\n}","import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {NavBarType} from \"../../redux/store\";\r\n\r\ntype PropsType = {\r\n    state: NavBarType\r\n}\r\n\r\nexport const Navbar = (props: PropsType) => {\r\n\r\n    let friends = props.state.friends.map( f => <div><img src={f.avatar}/><br/>{f.name}</div>)\r\n\r\n    return <nav className={s.nav}>\r\n        <div className={s.linkContainer}>\r\n            <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.linkContainer}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n        </div>\r\n        <div className={s.linkContainer}>\r\n            <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n        </div>\r\n        <div className={s.linkContainer}>\r\n            <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n        </div>\r\n        <div className={`${s.settings} ${s.linkContainer}`}>\r\n            <NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\r\n        </div>\r\n        <div className={s.linkContainer}>\r\n            <NavLink to=\"/friends\" activeClassName={s.active}>Friends</NavLink>\r\n        </div>\r\n        <div className={s.friends}>\r\n            { friends }\r\n        </div>\r\n    </nav>\r\n}\r\n","import {ActionType, ProfilePageType} from \"./store\";\r\nimport {v1} from \"uuid\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nconst SET_LIKED = \"SET-LIKED\";\r\n\r\nconst profileReducer = (state: ProfilePageType, action: ActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: v1(),\r\n                name: \"Anna Bell\",\r\n                avatarUrl: \"https://i.pinimg.com/originals/5f/4f/2b/5f4f2b6eb1e078bc99c043330879c143.jpg\",\r\n                message: state.newPostText,\r\n                liked: false,\r\n                likesCount: 0\r\n            }\r\n            state.posts.splice(0, 0, newPost)\r\n            state.newPostText = \"\"\r\n            return state;\r\n        case UPDATE_NEW_POST_TEXT:\r\n            if (action.newText) {\r\n                state.newPostText = action.newText\r\n            }\r\n            return state;\r\n        case SET_LIKED:\r\n            let postToLikeOrUnlike = state.posts.find(p => p.id === action.postId)\r\n            if (postToLikeOrUnlike) {\r\n                postToLikeOrUnlike.liked = !action.liked\r\n                if (postToLikeOrUnlike.liked) {\r\n                    postToLikeOrUnlike.likesCount = postToLikeOrUnlike.likesCount + 1\r\n                } else {\r\n                    postToLikeOrUnlike.likesCount = postToLikeOrUnlike.likesCount - 1\r\n                }\r\n            }\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = () => ({type: ADD_POST})\r\n\r\nexport const updateNewPostTextActionCreator = (text: string) =>\r\n    ({type: UPDATE_NEW_POST_TEXT, newText: text})\r\n\r\nexport const setLikedActionCreator = (postId: string, liked: boolean) =>\r\n    ({type: SET_LIKED, postId: postId, liked: liked})\r\n\r\nexport default profileReducer","import React from \"react\";\r\nimport s from './Post.module.css';\r\nimport likeImg from './like.svg';\r\nimport notLikedImg from './notLiked.png';\r\nimport {setLikedActionCreator} from \"../../../../redux/profile-reducer\";\r\nimport {ActionType} from \"../../../../redux/store\";\r\n\r\ntype PropsType = {\r\n    postId: string\r\n    avatarUrl: string\r\n    name: string\r\n    message: string\r\n    liked: boolean\r\n    likesCount: number\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const Post = (props: PropsType) => {\r\n    let onLikeClick = () => {\r\n        props.dispatch(setLikedActionCreator(props.postId, props.liked))\r\n    }\r\n\r\n    return <div className={s.item}>\r\n        <img className={s.ava} src={props.avatarUrl}/>\r\n        <div className={s.name}>{props.name}:</div>\r\n        <div className={s.message}>{props.message}</div>\r\n        <div>\r\n            <img onClick={onLikeClick} className={s.like} src={props.liked ? likeImg : notLikedImg}/> {props.likesCount}\r\n        </div>\r\n    </div>\r\n}","import React, {KeyboardEvent} from \"react\";\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {ActionType, PostType} from \"../../../redux/store\";\r\n\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const MyPosts = (props: PropsType) => {\r\n\r\n    let postElements = props.posts.map(p => <Post postId={p.id}\r\n                                                  avatarUrl={p.avatarUrl}\r\n                                                  name={p.name}\r\n                                                  message={p.message}\r\n                                                  liked={p.liked}\r\n                                                  likesCount={p.likesCount}\r\n                                                  dispatch={props.dispatch}\r\n    />)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    let addPost = () => {\r\n        props.dispatch(addPostActionCreator())\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current && newPostElement.current.value\r\n        text && props.dispatch(updateNewPostTextActionCreator(text))\r\n    }\r\n\r\n    let onCtrlEnterPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.ctrlKey && e.charCode === 13) {\r\n            addPost()\r\n        }\r\n    }\r\n\r\n    return <div className={s.postsBlock}>\r\n        <h3>My Posts</h3>\r\n        <div className={s.newPost}>\r\n        <textarea ref={newPostElement}\r\n                  className={s.textArea}\r\n                  value={props.newPostText}\r\n                  onChange={onPostChange}\r\n                  onKeyPress={onCtrlEnterPress}\r\n                  placeholder={\"Add a Post\"}>\r\n        </textarea>\r\n            <button className={s.addButton} onClick={addPost}>Add Post</button>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElements}\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\n\r\nexport const ProfileInfo = () => {\r\n    return <div className={s.profileInfo}>\r\n        <div className={s.coverContainer}>\r\n            <img className={s.profileCover}\r\n                 src=\"https://belarusfacts.by/upload/test/photos_png/Tourism/360/preview__3_.jpg\"/>\r\n        </div>\r\n        <div className={s.avatarContainer}>\r\n            <img className={s.avatar}\r\n                 src=\"https://i.pinimg.com/originals/5f/4f/2b/5f4f2b6eb1e078bc99c043330879c143.jpg\"/>\r\n        </div>\r\n        <div className={s.description}>\r\n            Anna Bell\r\n            <br/>\r\n            City: Minsk\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts/MyPosts\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ActionType, ProfilePageType} from \"../../redux/store\";\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePageType\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const Profile = (props: PropsType) => {\r\n\r\n    return <div>\r\n        <ProfileInfo/>\r\n        <MyPosts posts={props.profilePage.posts}\r\n                 newPostText={props.profilePage.newPostText}\r\n                 dispatch={props.dispatch}\r\n        />\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    avatar: string\r\n    friendName: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: PropsType) => {\r\n    return <li className={s.dialog}>\r\n        <img className={s.avatar} src={props.avatar} />\r\n        <NavLink to={`/dialogs/${props.id}`} activeClassName={s.active}>{props.friendName}</NavLink>\r\n    </li>\r\n}","import React from \"react\";\r\nimport s from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    avatar: string\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: PropsType) => {\r\n\r\n    return <div\r\n        className={props.avatar === \"https://i.pinimg.com/originals/5f/4f/2b/5f4f2b6eb1e078bc99c043330879c143.jpg\" ?\r\n            `${s.rightSide}` : `${s.leftSide}`}>\r\n        {props.avatar !== \"https://i.pinimg.com/originals/5f/4f/2b/5f4f2b6eb1e078bc99c043330879c143.jpg\" &&\r\n        <img src={props.avatar}/>}\r\n        <span className={s.message}> {props.message}</span>\r\n        {props.avatar === \"https://i.pinimg.com/originals/5f/4f/2b/5f4f2b6eb1e078bc99c043330879c143.jpg\" &&\r\n        <img src={props.avatar}/>}\r\n    </div>\r\n}","import {ActionType, DialogsPageType, RootStateType} from \"./store\";\r\nimport {v1} from \"uuid\";\r\n\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\n\r\nconst dialogsReducer = (state: DialogsPageType, action: ActionType) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let newMessage = {\r\n                id: v1(),\r\n                message: state.newMessageText,\r\n                avatar: \"https://i.pinimg.com/originals/5f/4f/2b/5f4f2b6eb1e078bc99c043330879c143.jpg\"\r\n            }\r\n            state.messages.push(newMessage)\r\n            state.newMessageText = \"\"\r\n            return state\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            if (action.body) {\r\n                state.newMessageText = action.body\r\n\r\n            }\r\n            return state\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE})\r\n\r\nexport const updateNewMessageBodyCreator = (text: string) =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: text})\r\n\r\nexport default dialogsReducer","import React, {ChangeEvent, KeyboardEvent, MouseEvent, useState} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Messages/Message\";\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\nimport {StoreType} from \"../../redux/store\";\r\n\r\ntype PropsType = {\r\n    store: StoreType\r\n}\r\n\r\nexport const Dialogs = (props: PropsType) => {\r\n    let state = props.store.getState()\r\n\r\n    let dialogsElements = state.dialogsPage.dialogs.map(d => <DialogItem avatar={d.avatar} friendName={d.name}\r\n                                                                         id={d.id}/>)\r\n    let messagesElements = state.dialogsPage.messages.map(m => <Message avatar={m.avatar} message={m.message}/>)\r\n\r\n    let newMessageBody = state.dialogsPage.newMessageText\r\n\r\n    let textarea = React.createRef<HTMLTextAreaElement>()\r\n\r\n    let onSendMessageClick = () => {\r\n        props.store.dispatch(sendMessageCreator())\r\n        textarea.current?.focus()\r\n\r\n    }\r\n\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.currentTarget.value\r\n        props.store.dispatch(updateNewMessageBodyCreator(body))\r\n    }\r\n\r\n    let onCtrlEntPress = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.ctrlKey && e.charCode === 13) {\r\n            onSendMessageClick()\r\n        }\r\n    }\r\n\r\n    return <div className={s.dialogs}>\r\n        <div className={s.dialogItems}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n            <div className={s.chat}>\r\n                {messagesElements}\r\n            </div>\r\n            <br/>\r\n            <div className={s.newMessage}>\r\n                <div>\r\n                    <textarea className={s.textarea}\r\n                              value={newMessageBody}\r\n                              onChange={onNewMessageChange}\r\n                              onKeyPress={onCtrlEntPress}\r\n                              placeholder={\"Enter your message\"}\r\n                              ref={textarea}\r\n                              autoFocus>\r\n                    </textarea>\r\n                </div>\r\n                <div>\r\n                    <button className={s.btn} onClick={onSendMessageClick}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport const News = () => {\r\n    return <div>\r\n        News\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport const Music = () => {\r\n    return <div>\r\n        Music\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport const Settings = () => {\r\n    return <div>\r\n        Settings\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nexport const Friends = () => {\r\n    return <div>\r\n        Friends\r\n    </div>\r\n}","import React from 'react';\nimport './App.css';\nimport {Route} from 'react-router-dom'\nimport {RootStateType} from './redux/store';\nimport {Header} from './components/Header/Header';\nimport {Navbar} from './components/Navbar/Navbar';\nimport {Profile} from './components/Profile/Profile';\nimport {Dialogs} from './components/Dialogs/Dialogs';\nimport {News} from './components/News/News';\nimport {Music} from './components/Music/Music';\nimport {Settings} from './components/Settings/Settings';\nimport {Friends} from './components/Friends/Friends';\nimport {StoreType} from \"./redux/store\";\n\nexport type PropsType = {\n    store: StoreType\n    state: RootStateType\n}\n\nconst App = (props: PropsType) => {\n    return (\n        <div className=\"app-wrapper\">\n            <Header/>\n            <Navbar state={props.state.navBar}/>\n            <div className=\"app-wrapper-content\">\n                <Route path=\"/profile\" render={() => <Profile profilePage={props.state.profilePage}\n                                                              dispatch={props.store.dispatch.bind(props.store)}\n                />}/>\n                <Route path=\"/dialogs\" render={() => <Dialogs store={props.store}/>}/>\n                <Route path=\"/news\" render={() => <News/>}/>\n                <Route path=\"/music\" render={() => <Music/>}/>\n                <Route path=\"/settings\" render={() => <Settings/>}/>\n                <Route path=\"/friends\" render={() => <Friends/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import {ActionType, NavBarType, RootStateType} from \"./store\";\r\n\r\nconst navbarReducer = (state: NavBarType, action: ActionType) => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default navbarReducer","import {v1} from \"uuid\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n    avatar: string\r\n}\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    name: string\r\n    avatarUrl: string\r\n    message: string\r\n    liked: boolean\r\n    likesCount: number\r\n}\r\nexport type FriendsType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageText: string\r\n}\r\nexport type NavBarType = {\r\n    friends: Array<FriendsType>\r\n}\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    navBar: NavBarType\r\n}\r\nexport type StoreType = {\r\n    _state: RootStateType\r\n    _callSubscriber: (state: RootStateType) => void\r\n    getState: () => RootStateType\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport type ActionType = {\r\n    type: string\r\n    newText?: string\r\n    body?: string\r\n    postId?: string\r\n    liked?: boolean\r\n}\r\n\r\nexport let store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            posts: [\r\n                {\r\n                    id: v1(),\r\n                    name: \"Johanna Fox\",\r\n                    avatarUrl: \"https://artsland.ru/files/logos/21246bb6c07d46c71f9b3e51dd7bf1da.png\",\r\n                    message: \"Hi! How are you?\",\r\n                    liked: true,\r\n                    likesCount: 15\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Kate Winsley\",\r\n                    avatarUrl: \"https://www.spletnik.ru/thumb/310x310/img/persons/Eva-Mendes-post.jpg\",\r\n                    message: \"I've learned React.\",\r\n                    liked: true,\r\n                    likesCount: 20\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Fiona Smith\",\r\n                    avatarUrl: \"https://sun9-53.userapi.com/impf/c846523/v846523336/486aa/WAmlS7FDlqo.jpg?size=400x0&quality=90&crop=6,0,488,488&sign=18d5b99310a2fbe958b38251cab6b5db&c_uniq_tag=arHi9u4Wz5f8hjjNrw4bqf5GiIihueE46UdzBj4g3y0&ava=1\",\r\n                    message: \"Happy Developer's Day!\",\r\n                    liked: true,\r\n                    likesCount: 5\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Bob Mayers\",\r\n                    avatarUrl: \"https://bmstu.ru/ps/media/avatars/kartashov/IMG_4688223453130%20(2).jpeg\",\r\n                    message: \"Are we gonna have a class tomorrow?\",\r\n                    liked: false,\r\n                    likesCount: 1\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Sandra Dalton\",\r\n                    avatarUrl: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTLTHcfkORUBugIE9Cw71xLu03aUrJIWsPMLg&usqp=CAU\",\r\n                    message: \"Let's get together tonight!:)\",\r\n                    liked: true,\r\n                    likesCount: 7\r\n                }],\r\n            newPostText: \"\"\r\n        },\r\n        dialogsPage: {\r\n            dialogs: [{\r\n                id: v1(),\r\n                name: \"Dimych\",\r\n                avatar: \"https://yt3.ggpht.com/a/AATXAJxegcKj7lnz8MCMgcAz-gpSgPs5u5yMvynOEWiL=s48-c-k-c0xffffffff-no-rj-mo\"\r\n            },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Andrey\",\r\n                    avatar: \"https://yt3.ggpht.com/a/AATXAJwpXLyeWh28awYmQxqSPXIM6q9eyw4vbkkCf-nJ=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Sveta\",\r\n                    avatar: \"https://yt3.ggpht.com/a/AATXAJxOgKlQ3vhAxrV93fA6igEnvBQQfJyvVblmUkCCUw=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Sasha\",\r\n                    avatar: \"https://yt3.ggpht.com/a/AATXAJx3tMtZZ9FJWqyZZo8YorLE948V2Fo4dSN3DnrzQQ=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Victor\",\r\n                    avatar: \"https://yt3.ggpht.com/a/AATXAJyx6cm5wmcNQDxMqOnQn-PWLGuUphBLcEZGuIaYYA=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Valera\",\r\n                    avatar: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRnjOdeIgaYOFx1p9q_XwIUEYfaQsyBDTcC0g&usqp=CAU\"\r\n                }],\r\n            messages: [{\r\n                id: v1(),\r\n                message: \"Hi\",\r\n                avatar: \"https://yt3.ggpht.com/a/AATXAJxOgKlQ3vhAxrV93fA6igEnvBQQfJyvVblmUkCCUw=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n            },\r\n                {\r\n                    id: v1(),\r\n                    message: \"What's up?\",\r\n                    avatar: \"https://yt3.ggpht.com/a/AATXAJxOgKlQ3vhAxrV93fA6igEnvBQQfJyvVblmUkCCUw=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    message: \"All good)\",\r\n                    avatar: \"https://i.pinimg.com/originals/5f/4f/2b/5f4f2b6eb1e078bc99c043330879c143.jpg\"\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    message: \"How are you?\",\r\n                    avatar: \"https://i.pinimg.com/originals/5f/4f/2b/5f4f2b6eb1e078bc99c043330879c143.jpg\"\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    message: \"I'm fine too\",\r\n                    avatar: \"https://yt3.ggpht.com/a/AATXAJxOgKlQ3vhAxrV93fA6igEnvBQQfJyvVblmUkCCUw=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n                }],\r\n            newMessageText: \"\"\r\n        },\r\n        navBar: {\r\n            friends: [{\r\n                id: v1(),\r\n                name: \"Dimych\",\r\n                avatar: \"https://yt3.ggpht.com/a/AATXAJxegcKj7lnz8MCMgcAz-gpSgPs5u5yMvynOEWiL=s48-c-k-c0xffffffff-no-rj-mo\"\r\n            },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Andrey\",\r\n                    avatar: \"https://yt3.ggpht.com/a/AATXAJwpXLyeWh28awYmQxqSPXIM6q9eyw4vbkkCf-nJ=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n                },\r\n                {\r\n                    id: v1(),\r\n                    name: \"Sveta\",\r\n                    avatar: \"https://yt3.ggpht.com/a/AATXAJxOgKlQ3vhAxrV93fA6igEnvBQQfJyvVblmUkCCUw=s176-c-k-c0x00ffffff-no-rj-mo\"\r\n                }]\r\n        }\r\n    },\r\n    _callSubscriber() {\r\n        console.log('state changed')\r\n    },\r\n\r\n    getState() {\r\n        return this._state;\r\n    },\r\n    subscribe(observer: () => void) {\r\n        this._callSubscriber = observer;\r\n    },\r\n\r\n    dispatch(action) {\r\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\r\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action)\r\n        this._state.navBar = navbarReducer(this._state.navBar, action)\r\n\r\n        this._callSubscriber(this._state)\r\n\r\n    }\r\n}\r\n\r\n\r\ndeclare const window: any\r\nwindow.store = store\r\n//Store - OOP","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {HashRouter} from 'react-router-dom';\nimport {store, StoreType} from './redux/store';\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <HashRouter>\n            <App state={store.getState()} store={store}/>\n        </HashRouter>,\n        document.getElementById('root')\n    );\n}\n\nrerenderEntireTree()     //нужно, чтобы происходила исходная отрисовка\n\nstore.subscribe(rerenderEntireTree)  //нужно, чтобы происходили перерисовки после изменений (в state)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}